{"version":3,"sources":["Components/Slide.js","Components/LandingPage.js","App.js","reportWebVitals.js","index.js"],"names":["Slide","props","handleTransition","event","console","log","getSlideClass","hidden","direction","getStyleProps","backgroundColor","color","textColor","bind","className","this","style","text","React","Component","LandingPage","isHidden","index","scrollIndex","getSlide","onUnblock","setPage","setScrollRange","setUnblockEvent","App","clampIndex","Math","min","max","state","scrollIndexMin","scrollIndexMax","handleScroll","scrollBlock","scrollForward","deltaY","setState","currScroll","stepSize","scrollBackward","setTimeout","unblockEvent","scrollTimeout","nextPage","currPage","scheduledPage","window","addEventListener","removeEventListener","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e47c06f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/Slide.css';\r\n\r\nclass Slide extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleTransition = this.handleTransition.bind(this);\r\n    } \r\n\r\n    handleTransition = (event) => {\r\n        console.log(\"asdf\");\r\n    }\r\n\r\n    getSlideClass = () => { return \"Slide \"+(this.props.hidden ? \"hidden-\"+this.props.direction : \"shown\"); }\r\n\r\n    getStyleProps = () => { return {backgroundColor: this.props.backgroundColor, color: this.props.textColor}; }\r\n\r\n    render() {\r\n        return(\r\n            <div className={this.getSlideClass()} style={this.getStyleProps()}>\r\n                <p>{this.props.text}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slide;\r\n","import React from 'react';\r\nimport Slide from './Slide.js';\r\n\r\nclass LandingPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.props.setScrollRange(0, 3);\r\n        this.props.setUnblockEvent(this.onUnblock);\r\n    }\r\n\r\n    isHidden = (index) => {\r\n        return index < this.props.scrollIndex;\r\n    }\r\n\r\n    getSlide = (hidden, direction, backgroundColor, textColor, text) => {\r\n        return <Slide hidden={hidden} direction={direction} backgroundColor={backgroundColor} textColor={textColor} text={text} />;\r\n    }\r\n\r\n    onUnblock = () => { if(this.props.scrollIndex >= 3) this.props.setPage(\"test\"); }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                {this.getSlide(this.isHidden(2), \"top\", \"#27586B\", \"#022735\", \"Genießen Sie ihren Aufenthalt.\")}\r\n                {this.getSlide(this.isHidden(1), \"left\", \"#7D2A68\", \"#3F002F\", \"Auf dieser Seite finden Sie alles was sie über mich wissen müssen.\")}\r\n                {this.getSlide(this.isHidden(0), \"right\", \"#AA4B39\", \"#550D00\", \"Hi, Ich bin Bruno.\")}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LandingPage;","import React from 'react';\nimport './App.css';\nimport LandingPage from './Components/LandingPage';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currScroll: 0,\n            stepSize: 7,\n\n            scrollIndex: 0,\n            scrollIndexMin: 0,\n            scrollIndexMax: 0,\n            scrollTimeout: 500,\n\n            currPage: \"landing_page\",\n            scheduledPage: null,\n\n            scrollBlock: false,\n            scrollForward: true,\n            scrollBackward: true,\n\n            unblockEvent: () => { },\n        }\n    }\n\n    clampIndex = (index) => {\n        return Math.min(Math.max(index, this.state.scrollIndexMin), this.state.scrollIndexMax);\n    }\n\n    handleScroll = (event) => {\n        if (!this.state.scrollBlock) {\n            if (this.state.scrollForward && event.deltaY > 0) {\n                this.setState({ currScroll: this.state.currScroll + 1 });\n\n                if (this.state.currScroll >= this.state.stepSize) this.setState({\n                    scrollBlock: true,\n                    currScroll: 0,\n                    scrollIndex: this.clampIndex(this.state.scrollIndex + 1)\n                });\n            }\n\n            if (this.state.scrollBackward && event.deltaY < 0) {\n                this.setState({ currScroll: this.state.currScroll - 1 });\n\n                if (this.state.currScroll <= -this.state.stepSize) this.setState({\n                    scrollBlock: true,\n                    currScroll: 0,\n                    scrollIndex: this.clampIndex(this.state.scrollIndex - 1)\n                });\n\n            }\n\n            if (this.state.scrollBlock) setTimeout(() => {\n                this.setState({ scrollBlock: false });\n                this.state.unblockEvent();\n            }, this.state.scrollTimeout);\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('wheel', this.handleScroll, true);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('wheel', this.handleScroll);\n    }\n\n    setPage = (nextPage) => this.setState({ currPage: nextPage });\n\n    setScrollRange = (min, max) => {\n        this.setState({ scrollIndexMin: min, scrollIndexMax: max, scrollIndex: min });\n    }\n\n    render() {\n        switch (this.state.currPage) {\n            case \"landing_page\": {\n                return <LandingPage\n                    setUnblockEvent={(target) => this.state.unblockEvent = target}\n                    scrollIndex={this.state.scrollIndex}\n                    setPage={this.setPage}\n                    setScrollRange={this.setScrollRange}\n                />\n            }\n            case \"test\": { return <p>test</p> }\n            default: { return <p>uh oh</p> }\n        }\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}